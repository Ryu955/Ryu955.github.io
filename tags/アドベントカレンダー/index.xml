<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>アドベントカレンダー on Ryu955</title>
    <link>https://ryu955.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/</link>
    <description>Recent content in アドベントカレンダー on Ryu955</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp</language>
    <lastBuildDate>Mon, 18 Dec 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://ryu955.github.io/tags/%E3%82%A2%E3%83%89%E3%83%99%E3%83%B3%E3%83%88%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%BC/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UNIXという考え方を読んだ</title>
      <link>https://ryu955.github.io/posts/2017/12/18/000000/</link>
      <pubDate>Mon, 18 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://ryu955.github.io/posts/2017/12/18/000000/</guid>
      <description>はじめに 　今回は「UNIXという考え方」を（半年以上前に）読んだのでその感想をかいていきます。
 　UNIXにおける考え方やプログラミングをする上で大切なことはもちろん，研究や普段の生活でも言えるようなこともたくさんかいてあって面白い本でした。
本の感想 　UNIXの考え方 : 基本的な9つの定理と10このUNIXの文化がかいてあり、それぞれ実例などを踏まえて解説していくって感じでした。
　その中でも個人的に面白かったところや絶対覚えておこうって思った以下のセクションについて、ざっと簡単にまとめて思ったことをかいていこうかなと思います。
 スモール・イズ・ビューティフル できるだけ早く試作する 1つのプログラムには1つのことをうまくやらせる 森林を守る 部分的総和は全体よりも大きい 90パーセントの解を目指す  スモール・イズ・ビューティフル 内容  小さいものは、大きいものにはない利点がいくつもある。小さいもの同士なら、簡単に独自の便利な方法で組み合わせることが出来るというのもその一つだからだ。
 　目的とそれに対するアプローチを明確にして、細分化して実装すれば、似たような場所には同じプログラムを再利用できるよね。 ほかにも、小さいと再利用できるだけじゃなくて、わかりやすいし保守もしやすい、他のツールと共存しやすいなど様々なメリットがある。
思ったこと 　最近はプログラムをできるだけいい感じのまとまりを関数にするように意識してプログラムを書くようにしました。
1つのプログラムには1つのことをうまくやらせる 内容  一つのことに集中することで、プログラムに不要な部分をなくせる。不要な部分があると、実行速度が遅くなり、不必要に複雑になり、融通が効かなくなる。
 　一つのことをうまくできるプログラムを複数組み合わせたりカスタマイズすることで、目的に沿った処理を果たせるほうがいいよね。 じゃないと、似たような目的なのに、それぞれに対して全て新しいものを作る「車輪の再発明」をするのは無駄だよね。 さらに、一つの機能に絞ることで、プログラム自体も小さくできるよね。
思ったこと 　細分化するメリットがこれだなっていうのが分かった気になった。
できるだけ早く試作する 内容  あらゆるプロジェクトにおいて、試作は重要だ。一般的に試作は設計全体のうちのほんの一部として扱われているが、UNIXにおいての試作は、効率的な設計には欠かせない重要な一部だ。
 　仕様書とかをかいてないでとりあえず試作を作ったほうがいいよね。 試作を作ると何がうまくいき、何がうまくいかないかがわかるようになる。 これによって、様々なリスクを減らすことができるよね。
思ったこと 　キレイなプログラムを書こうと考えてる暇があったら汚いプログラムでいいからとりあえずかいて、そのあとリファクタリングするのを意識するようにした。 あとは、研究でもとりあえずプロトタイプとかをさっさと作ったほうがいいのかなって思った。
森林を守る 内容  UNIXユーザーは紙のドキュメントを嫌う。全てのテキストファイルをコンピュータに保存して、強力なツールでそれらを操作するのだが、このことには十分な理由がある。
 　プログラムを印刷してメモをするひとがいるけど、印刷するとそのプログラムは並び替えも移動も編集もできなくなってしまって無駄だよね。
思ったこと 　昔、印刷されたプログラムとにらめっこをしてるひとをみてワオっておもったことが、言葉にされてて個人的に感動した。 他にも、メモとかも電子化したほうがメリット多いよねって思う。 りんごペンを買ってからは紙に何かをすることをほとんどしなくなった。</description>
    </item>
    
  </channel>
</rss>